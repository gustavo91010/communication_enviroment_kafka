/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ajudaqui.logistocaServer.kafka.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LogisticUpdated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5003526988833824143L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogisticUpdated\",\"namespace\":\"com.ajudaqui.logistocaServer.kafka.entity\",\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"departureDate\",\"type\":\"string\"},{\"name\":\"estimatedArrivalDate\",\"type\":\"string\"},{\"name\":\"trackingCode\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LogisticUpdated> ENCODER =
      new BinaryMessageEncoder<LogisticUpdated>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogisticUpdated> DECODER =
      new BinaryMessageDecoder<LogisticUpdated>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LogisticUpdated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LogisticUpdated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogisticUpdated>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LogisticUpdated to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LogisticUpdated from a ByteBuffer. */
  public static LogisticUpdated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence code;
  @Deprecated public java.lang.CharSequence departureDate;
  @Deprecated public java.lang.CharSequence estimatedArrivalDate;
  @Deprecated public java.lang.CharSequence trackingCode;
  @Deprecated public java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogisticUpdated() {}

  /**
   * All-args constructor.
   * @param code The new value for code
   * @param departureDate The new value for departureDate
   * @param estimatedArrivalDate The new value for estimatedArrivalDate
   * @param trackingCode The new value for trackingCode
   * @param timestamp The new value for timestamp
   */
  public LogisticUpdated(java.lang.CharSequence code, java.lang.CharSequence departureDate, java.lang.CharSequence estimatedArrivalDate, java.lang.CharSequence trackingCode, java.lang.CharSequence timestamp) {
    this.code = code;
    this.departureDate = departureDate;
    this.estimatedArrivalDate = estimatedArrivalDate;
    this.trackingCode = trackingCode;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return departureDate;
    case 2: return estimatedArrivalDate;
    case 3: return trackingCode;
    case 4: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.CharSequence)value$; break;
    case 1: departureDate = (java.lang.CharSequence)value$; break;
    case 2: estimatedArrivalDate = (java.lang.CharSequence)value$; break;
    case 3: trackingCode = (java.lang.CharSequence)value$; break;
    case 4: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'departureDate' field.
   * @return The value of the 'departureDate' field.
   */
  public java.lang.CharSequence getDepartureDate() {
    return departureDate;
  }

  /**
   * Sets the value of the 'departureDate' field.
   * @param value the value to set.
   */
  public void setDepartureDate(java.lang.CharSequence value) {
    this.departureDate = value;
  }

  /**
   * Gets the value of the 'estimatedArrivalDate' field.
   * @return The value of the 'estimatedArrivalDate' field.
   */
  public java.lang.CharSequence getEstimatedArrivalDate() {
    return estimatedArrivalDate;
  }

  /**
   * Sets the value of the 'estimatedArrivalDate' field.
   * @param value the value to set.
   */
  public void setEstimatedArrivalDate(java.lang.CharSequence value) {
    this.estimatedArrivalDate = value;
  }

  /**
   * Gets the value of the 'trackingCode' field.
   * @return The value of the 'trackingCode' field.
   */
  public java.lang.CharSequence getTrackingCode() {
    return trackingCode;
  }

  /**
   * Sets the value of the 'trackingCode' field.
   * @param value the value to set.
   */
  public void setTrackingCode(java.lang.CharSequence value) {
    this.trackingCode = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new LogisticUpdated RecordBuilder.
   * @return A new LogisticUpdated RecordBuilder
   */
  public static com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder newBuilder() {
    return new com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder();
  }

  /**
   * Creates a new LogisticUpdated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogisticUpdated RecordBuilder
   */
  public static com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder newBuilder(com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder other) {
    return new com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder(other);
  }

  /**
   * Creates a new LogisticUpdated RecordBuilder by copying an existing LogisticUpdated instance.
   * @param other The existing instance to copy.
   * @return A new LogisticUpdated RecordBuilder
   */
  public static com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder newBuilder(com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated other) {
    return new com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder(other);
  }

  /**
   * RecordBuilder for LogisticUpdated instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogisticUpdated>
    implements org.apache.avro.data.RecordBuilder<LogisticUpdated> {

    private java.lang.CharSequence code;
    private java.lang.CharSequence departureDate;
    private java.lang.CharSequence estimatedArrivalDate;
    private java.lang.CharSequence trackingCode;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.departureDate)) {
        this.departureDate = data().deepCopy(fields()[1].schema(), other.departureDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.estimatedArrivalDate)) {
        this.estimatedArrivalDate = data().deepCopy(fields()[2].schema(), other.estimatedArrivalDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.trackingCode)) {
        this.trackingCode = data().deepCopy(fields()[3].schema(), other.trackingCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LogisticUpdated instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.departureDate)) {
        this.departureDate = data().deepCopy(fields()[1].schema(), other.departureDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.estimatedArrivalDate)) {
        this.estimatedArrivalDate = data().deepCopy(fields()[2].schema(), other.estimatedArrivalDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.trackingCode)) {
        this.trackingCode = data().deepCopy(fields()[3].schema(), other.trackingCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepartureDate() {
      return departureDate;
    }

    /**
      * Sets the value of the 'departureDate' field.
      * @param value The value of 'departureDate'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder setDepartureDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.departureDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'departureDate' field has been set.
      * @return True if the 'departureDate' field has been set, false otherwise.
      */
    public boolean hasDepartureDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'departureDate' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder clearDepartureDate() {
      departureDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedArrivalDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getEstimatedArrivalDate() {
      return estimatedArrivalDate;
    }

    /**
      * Sets the value of the 'estimatedArrivalDate' field.
      * @param value The value of 'estimatedArrivalDate'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder setEstimatedArrivalDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.estimatedArrivalDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedArrivalDate' field has been set.
      * @return True if the 'estimatedArrivalDate' field has been set, false otherwise.
      */
    public boolean hasEstimatedArrivalDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'estimatedArrivalDate' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder clearEstimatedArrivalDate() {
      estimatedArrivalDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackingCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getTrackingCode() {
      return trackingCode;
    }

    /**
      * Sets the value of the 'trackingCode' field.
      * @param value The value of 'trackingCode'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder setTrackingCode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.trackingCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'trackingCode' field has been set.
      * @return True if the 'trackingCode' field has been set, false otherwise.
      */
    public boolean hasTrackingCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'trackingCode' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder clearTrackingCode() {
      trackingCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticUpdated.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogisticUpdated build() {
      try {
        LogisticUpdated record = new LogisticUpdated();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.departureDate = fieldSetFlags()[1] ? this.departureDate : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.estimatedArrivalDate = fieldSetFlags()[2] ? this.estimatedArrivalDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.trackingCode = fieldSetFlags()[3] ? this.trackingCode : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogisticUpdated>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogisticUpdated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogisticUpdated>
    READER$ = (org.apache.avro.io.DatumReader<LogisticUpdated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
