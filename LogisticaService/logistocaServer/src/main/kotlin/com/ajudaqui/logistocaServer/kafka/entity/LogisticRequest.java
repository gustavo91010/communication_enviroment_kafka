/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ajudaqui.logistocaServer.kafka.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LogisticRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2862901722226380214L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogisticRequest\",\"namespace\":\"com.ajudaqui.logistocaServer.kafka.entity\",\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"volume\",\"type\":\"double\"},{\"name\":\"weight\",\"type\":\"double\"},{\"name\":\"destination\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LogisticRequest> ENCODER =
      new BinaryMessageEncoder<LogisticRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogisticRequest> DECODER =
      new BinaryMessageDecoder<LogisticRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LogisticRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LogisticRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogisticRequest>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LogisticRequest to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LogisticRequest from a ByteBuffer. */
  public static LogisticRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence code;
  @Deprecated public double volume;
  @Deprecated public double weight;
  @Deprecated public java.lang.CharSequence destination;
  @Deprecated public java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogisticRequest() {}

  /**
   * All-args constructor.
   * @param code The new value for code
   * @param volume The new value for volume
   * @param weight The new value for weight
   * @param destination The new value for destination
   * @param timestamp The new value for timestamp
   */
  public LogisticRequest(java.lang.CharSequence code, java.lang.Double volume, java.lang.Double weight, java.lang.CharSequence destination, java.lang.CharSequence timestamp) {
    this.code = code;
    this.volume = volume;
    this.weight = weight;
    this.destination = destination;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return volume;
    case 2: return weight;
    case 3: return destination;
    case 4: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.CharSequence)value$; break;
    case 1: volume = (java.lang.Double)value$; break;
    case 2: weight = (java.lang.Double)value$; break;
    case 3: destination = (java.lang.CharSequence)value$; break;
    case 4: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public java.lang.Double getVolume() {
    return volume;
  }

  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(java.lang.Double value) {
    this.volume = value;
  }

  /**
   * Gets the value of the 'weight' field.
   * @return The value of the 'weight' field.
   */
  public java.lang.Double getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * @param value the value to set.
   */
  public void setWeight(java.lang.Double value) {
    this.weight = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public java.lang.CharSequence getDestination() {
    return destination;
  }

  /**
   * Sets the value of the 'destination' field.
   * @param value the value to set.
   */
  public void setDestination(java.lang.CharSequence value) {
    this.destination = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new LogisticRequest RecordBuilder.
   * @return A new LogisticRequest RecordBuilder
   */
  public static com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder newBuilder() {
    return new com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder();
  }

  /**
   * Creates a new LogisticRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogisticRequest RecordBuilder
   */
  public static com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder newBuilder(com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder other) {
    return new com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder(other);
  }

  /**
   * Creates a new LogisticRequest RecordBuilder by copying an existing LogisticRequest instance.
   * @param other The existing instance to copy.
   * @return A new LogisticRequest RecordBuilder
   */
  public static com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder newBuilder(com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest other) {
    return new com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder(other);
  }

  /**
   * RecordBuilder for LogisticRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogisticRequest>
    implements org.apache.avro.data.RecordBuilder<LogisticRequest> {

    private java.lang.CharSequence code;
    private double volume;
    private double weight;
    private java.lang.CharSequence destination;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.volume)) {
        this.volume = data().deepCopy(fields()[1].schema(), other.volume);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.weight)) {
        this.weight = data().deepCopy(fields()[2].schema(), other.weight);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LogisticRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.volume)) {
        this.volume = data().deepCopy(fields()[1].schema(), other.volume);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.weight)) {
        this.weight = data().deepCopy(fields()[2].schema(), other.weight);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public java.lang.Double getVolume() {
      return volume;
    }

    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder setVolume(double value) {
      validate(fields()[1], value);
      this.volume = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder clearVolume() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'weight' field.
      * @return The value.
      */
    public java.lang.Double getWeight() {
      return weight;
    }

    /**
      * Sets the value of the 'weight' field.
      * @param value The value of 'weight'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder setWeight(double value) {
      validate(fields()[2], value);
      this.weight = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'weight' field has been set.
      * @return True if the 'weight' field has been set, false otherwise.
      */
    public boolean hasWeight() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'weight' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder clearWeight() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public java.lang.CharSequence getDestination() {
      return destination;
    }

    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder setDestination(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.destination = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder clearDestination() {
      destination = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.ajudaqui.logistocaServer.kafka.entity.LogisticRequest.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogisticRequest build() {
      try {
        LogisticRequest record = new LogisticRequest();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.volume = fieldSetFlags()[1] ? this.volume : (java.lang.Double) defaultValue(fields()[1]);
        record.weight = fieldSetFlags()[2] ? this.weight : (java.lang.Double) defaultValue(fields()[2]);
        record.destination = fieldSetFlags()[3] ? this.destination : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogisticRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogisticRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogisticRequest>
    READER$ = (org.apache.avro.io.DatumReader<LogisticRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
